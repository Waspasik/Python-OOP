# –ö–ª–∞—Å—Å Circle
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å Circle, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫—Ä—É–≥. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å
# –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:

# radius ‚Äî —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞

# –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Circle –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–¥–∏–Ω –∞—Ç—Ä–∏–±—É—Ç:

# radius ‚Äî —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞

# –ö–ª–∞—Å—Å Circle –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞:

# from_diameter() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞

class Circle():
    def __init__(self, radius):
        self.radius = radius
        
    @classmethod
    def from_diameter(cls, diameter):
        return cls(diameter/2)



# –ö–ª–∞—Å—Å Rectangle
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å Rectangle, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å
# –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

# length ‚Äî –¥–ª–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
# width ‚Äî —à–∏—Ä–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞

# –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Rectangle –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–≤–∞ –∞—Ç—Ä–∏–±—É—Ç–∞:

# length ‚Äî –¥–ª–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
# width ‚Äî —à–∏—Ä–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞

# –ö–ª–∞—Å—Å Rectangle –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞:

# square() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ side –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
# –∫–ª–∞—Å—Å–∞ Rectangle c –¥–ª–∏–Ω–æ–π –∏ —à–∏—Ä–∏–Ω–æ–π, —Ä–∞–≤–Ω—ã–º–∏ side

class Rectangle():
    def __init__(self, length, width):
        self.length = length
        self.width = width
        
    @classmethod
    def square(cls, side):
        return cls(side, side)



# –ö–ª–∞—Å—Å QuadraticPolynomial
# –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ç—Ä–µ—Ö—á–ª–µ–Ω ‚Äì —ç—Ç–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω –≤–∏–¥–∞ ax^2 + bx + c, –≥–¥–µ a != 0. –ù–∞–ø—Ä–∏–º–µ—Ä:

# x^2 + 1
# x^2 - 5x + 6

# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å QuadraticPolynomial, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ç—Ä–µ—Ö—á–ª–µ–Ω. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
# –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

# a ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç a –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞
# b ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞
# c ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞

# –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ QuadraticPolynomial –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç—Ä–∏ –∞—Ç—Ä–∏–±—É—Ç–∞:

# a ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç a –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞
# b ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç b –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞
# c ‚Äî –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞

# –ö–ª–∞—Å—Å QuadraticPolynomial –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç—ã—Ä–µ —Å–≤–æ–π—Å—Ç–≤–∞:

# –ö–ª–∞—Å—Å QuadraticPolynomial –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞:

# from_iterable() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ —Ç—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# a, b –∏ c, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
# QuadraticPolynomial, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤

# from_str() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
# a, b –∏ c –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ç—Ä–µ—Ö—á–ª–µ–Ω–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
# QuadraticPolynomial, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö
# –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ float

class QuadraticPolynomial:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    @classmethod
    def from_iterable(cls, iter_obj):
        a, b, c = iter_obj
        return cls(a, b, c)
    
    @classmethod
    def from_str(cls, string):
        a, b, c = map(float, string.split())
        return cls(a, b, c)



# –ö–ª–∞—Å—Å StrExtension
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å StrExtension, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
# —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

# –ö–ª–∞—Å—Å StrExtension –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç—Ä–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∞:

# remove_vowels() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è–µ—Ç –∏–∑ –Ω–µ–µ –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ
# –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# leave_alpha() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è–µ—Ç –∏–∑ –Ω–µ–µ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã,
# –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# replace_all() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞ string, chars –∏ char, –∑–∞–º–µ–Ω—è–µ—Ç –≤
# —Å—Ç—Ä–æ–∫–µ string –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ chars –Ω–∞ char —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É.

class StrExtension():
    @staticmethod
    def remove_vowels(string):
        vowels = 'aeiouy'
        return ''.join(list(filter(lambda x: x.lower() not in vowels, string)))
    
    @staticmethod
    def leave_alpha(string):
        alphabet = [chr(i) for i in range(65, 123) if chr(i).isalpha()]
        return ''.join(list(filter(lambda x: x in ''.join(alphabet), string)))
    
    @staticmethod
    def replace_all(string, chars, char):
        return ''.join([char if i in chars else i for i in string ])



# –ö–ª–∞—Å—Å CaseHelper üå∂Ô∏è
# Snake Case ‚Äî —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º
# –Ω–∏–∂–Ω–µ–≥–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –∏ –Ω–µ –∏–º–µ—é—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–∞–ø–∏—Å–∏, –ø—Ä–∏—á—ë–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π
# –±—É–∫–≤—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, bee_geek –∏ hello_world.

# Upper Camel Case ‚Äî —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Å–ª–æ–≤, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø–∏—à—É—Ç—Å—è —Å–ª–∏—Ç–Ω–æ
# –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, BeeGeek –∏ HelloWorld.

# –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å CaseHelper, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ —Å—Ç–∏–ª—è—Ö Snake Case
# –∏ Upper Camel Case. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

# –ö–ª–∞—Å—Å CaseHelper –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç—ã—Ä–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∞:

# is_snake() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è
# —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∏–ª–µ Snake Case, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ

# is_upper_camel() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π True, –µ—Å–ª–∏
# –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Å—Ç–∏–ª–µ Upper Camel Case, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ

# to_snake() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏–ª–µ Upper Camel Case,
# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–µ –≤ —Å—Ç–∏–ª–µ Snake Case –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# to_upper_camel() ‚Äî –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ —Å—Ç–∏–ª–µ Snake Case,
# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–µ –≤ —Å—Ç–∏–ª–µ Upper Camel Case –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

import re


class CaseHelper:
    @staticmethod
    def is_snake(string):
        snake_pattern = r'^[a-z]+_*([a-z]+)+'
        if re.fullmatch(snake_pattern, string):
            return True
        return False
    
    @staticmethod
    def is_upper_camel(string):
        camel_pattern = r'^[A-Z][a-z]+([A-Z][a-z]+)*'
        if re.fullmatch(camel_pattern, string):
            return True
        return False
    
    @staticmethod
    def to_snake(string):
        result = string[0].lower() + ''.join([f'_{i.lower()}' if i.isupper() else i for i in string[1::]])
        return result

    @staticmethod
    def to_upper_camel(string):
        result = ''.join(list(map(lambda x: x.title(), string.split('_'))))
        return result
