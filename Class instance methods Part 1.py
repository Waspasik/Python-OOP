# Класс Gun
# Реализуйте класс Gun, описывающий ружье. При создании экземпляра класс не должен
# принимать никаких аргументов.

# Класс Gun должен иметь один метод экземпляра:

# shoot() — метод, при вызове которого выводится строка pif

class Gun():
    def shoot(self):
        print('pif')



# Класс User
# Вам доступен класс User, описывающий интернет-пользователя. При создании экземпляра
# класс принимает один аргумент:

# name — имя пользователя

# Экземпляр класса User имеет два атрибута:

# name — имя пользователя
# friends — количество друзей пользователя, начальным значением является 0

# Класс User имеет один метод экземпляра:

# add_friends() — метод, принимающий в качестве аргумента целое число n и увеличивающий
# количество друзей пользователя на n

# Найдите и исправьте ошибки, допущенные при реализации метода add_friends().

class User:
    def __init__(self, name):
        self.name = name
        self.friends = 0

    def add_friends(self, n):
        self.friends += n



# Класс House
# Вам доступен класс House, описывающий дом. При создании экземпляра класс принимает два
# аргумента в следующем порядке:

# color — цвет дома
# rooms — количество комнат в доме

# Экземпляр данного класса имеет два атрибута:

# color — цвет дома
# rooms — количество комнат в доме

# Реализуйте для класса House два метода экземпляра:

# paint() — метод, принимающий в качестве аргумента значение new_color и изменяющий текущий
# цвет дома на new_color
# add_rooms() — метод, принимающий в качестве аргумента целое число n и увеличивающий
# количество комнат в доме на n

class House:
    def __init__(self, color, rooms):
        self.color = color
        self.rooms = rooms
        
    def paint(self, new_color):
        self.color = new_color
    
    def add_rooms(self, n):
        self.rooms += n



# Класс Circle
# Реализуйте класс Circle, описывающий круг. При создании экземпляра класс должен принимать
# один аргумент:

# radius — радиус круга

# Экземпляр класса Circle должен иметь три атрибута:

# radius — радиус круга
# diameter — диаметр круга
# area — площадь круга

from math import pi


class Circle():
    def __init__(self, radius):
        self.radius = radius
        self.diameter = self.radius*2
        self.area = pi * self.radius**2



# Класс Bee
# Реализуйте класс Bee, описывающий пчелку, которая перемещается по координатной плоскости в
# четырех направлениях: вверх, вниз, влево и вправо. При создании экземпляра класс должен
# принимать два аргумента в следующем порядке:

# x — координата пчелки по оси x, по умолчанию имеет значение 0
# y — координата пчелки по оси y, по умолчанию имеет значение 0

# Экземпляр класса Bee должен иметь два атрибута:

# x — координата пчелки по оси x
# y — координата пчелки по оси y

# Класс Bee должен иметь четыре метода экземпляра:

# move_up() — метод, принимающий в качестве аргумента целое число n и увеличивающий координату пчелки по оси y на n
# move_down() — метод, принимающий в качестве аргумента целое число n и уменьшающий координату пчелки по оси y на n
# move_right() — метод, принимающий в качестве аргумента целое число n и увеличивающий координату пчелки по оси x на n
# move_left() — метод, принимающий в качестве аргумента целое число n и уменьшающий координату пчелки по оси x на n

class Bee():
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def move_up(self, n):
        self.y += n
    
    def move_down(self, n):
        self.y -= n

    def move_right(self, n):
        self.x += n
    
    def move_left(self, n):
        self.x -= n



# Класс Gun
# Реализуйте класс Gun, описывающий ружье. При создании экземпляра класс не должен принимать
# никаких аргументов.

# Класс Gun должен иметь один метод экземпляра:

# shoot() — метод, при первом вызове которого выводится строка pif, при втором — paf, при
# третьем — pif, при четвертом — paf, и так далее

class Gun():
    def __init__(self):
        self.counter = 0
    
    def shoot(self):
        print('pif' if self.counter % 2 == 0 else 'paf')
        self.counter += 1



# Класс Gun
# Реализуйте класс Gun, описывающий ружье. При создании экземпляра класс не должен принимать
# никаких аргументов.

# Класс Gun должен иметь три метода экземпляра:

# shoot() — метод, при первом вызове которого выводится строка pif, при втором — paf, при
# третьем — pif, при четвертом — paf, и так далее
# shots_count() — метод, возвращающий актуальное количество вызовов метода shoot()
# shots_reset() — метод, сбрасывающий количество вызовов метода shoot() до нуля

class Gun():
    def __init__(self):
        self.counter = 0
    
    def shoot(self):
        print('pif' if self.counter % 2 == 0 else 'paf')
        self.counter += 1
    
    def shots_count(self):
        return self.counter

    def shots_reset(self):
        self.counter = 0



# Класс Scales
# Реализуйте класс Scales, описывающий весы с двумя чашами. При создании экземпляра класс не
# должен принимать никаких аргументов.

# Класс Scales должен иметь три метода экземпляра:

# add_right() — метод, принимающий в качестве аргумента массу груза в килограммах и добавляющий
# на правую чашу весов этот груз
# add_left() — метод, принимающий в качестве аргумента массу груза в килограммах и добавляющий
# на левую чашу весов этот груз
# get_result() — метод, возвращающий строку Весы в равновесии, если массы грузов на чашах
# совпадают, Правая чаша тяжелее — если правая чаша тяжелее, Левая чаша тяжелее — если левая
# чаша тяжелее

# Примечание 1. Пустые весы всегда находятся в равновесии.

class Scales():
    def __init__(self):
        self.right_pan = 0
        self.left_pan = 0
    
    def add_right(self, cargo):
        self.right_pan += cargo
        
    def add_left(self, cargo):
        self.left_pan += cargo

    def get_result(self):
        if self.right_pan > self.left_pan:
            return 'Правая чаша тяжелее'
        elif self.right_pan < self.left_pan:
            return 'Левая чаша тяжелее'
        return 'Весы в равновесии'
