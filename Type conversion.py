# Класс Vector
# Реализуйте класс Vector, описывающий вектор на плоскости. При создании экземпляра класс
# должен принимать два аргумента в следующем порядке:

# x — координата вектора по оси x
# y — координата вектора по оси y

# Экземпляр класса Vector должен иметь следующее неформальное строковое представление:

# (<координата x>, <координата y>)

# Также экземпляр класса Vector должен поддерживать приведение к типам bool, int, float и complex:

# при приведении к типу bool значением вектора должно являться значение True, если хотя бы
# одна его координата не равна нулю, или False в противном случае
# при приведении к типу int значением вектора должен являться его модуль в виде целого числа
# с отброшенной дробной частью
# при приведении к типу float значением вектора должен являться его модуль в виде вещественного
# числа
# при приведении к типу complex значением вектора должно являться комплексное число вещественная
# часть которого равна координате вектора по оси x, мнимая часть — координате вектора по оси y

from math import sqrt


class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __str__(self) -> str:
        return f"({self.x}, {self.y})"
 
    def __bool__(self):
        return any([self.x, self.y])
    
    def __int__(self):
        return int(sqrt(self.x**2 + self.y**2))
    
    def __float__(self):
        return float(sqrt(self.x**2 + self.y**2))
    
    def __complex__(self):
        return complex(self.x, self.y)



# Класс Temperature
# Реализуйте класс Temperature, описывающий температуру в градусах по шкале Цельсия. При
# создании экземпляра класс должен принимать один аргумент:

# temperature — температура в градусах по шкале Цельсия

# Класс Temperature должен иметь один метод экземпляра:

# to_fahrenheit() — метод, возвращающий температуру по шкале Фаренгейта

# Класс Temperature должен иметь один метод класса:

# from_fahrenheit() — метод, принимающий в качестве аргумента температуру по шкале Фаренгейта
# и возвращающий экземпляр класса Temperature, созданный на основе переданной температуры

# Экземпляр класса Temperature должен иметь следующее неформальное строковое представление:

# <температура в градусах по шкале Цельсия с округлением до двух знаков после запятой>°C

# Также экземпляр класса Temperature должен поддерживать приведение к типам bool, int и float:

# при приведении к типу bool значением экземпляра класса Temperature должно являться значение
# True, если его температура выше нуля, или False в противном случае
# при приведении к типу int значением экземпляра класса Temperature должна являться его
# температура в виде целого числа с отброшенной дробной частью
# при приведении к типу float значением экземпляра класса Temperature должна являться его
# температура в виде вещественного числа

class Temperature:
    def __init__(self, temperature):
        self.temperature = temperature
    
    def __str__(self):
        return f"{round(self.temperature, 2)}°C" 
    
    def __bool__(self):
        return self.temperature > 0
    
    def __int__(self):
        return int(self.temperature)
    
    def __float__(self):
        return float(self.temperature)
    
    def to_fahrenheit(self):
        return self.temperature * 9/5 + 32
 
    @classmethod
    def from_fahrenheit(cls, t):
        t = 5/9 * (t - 32)
        return cls(t)
