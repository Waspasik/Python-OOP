# Класс Person
# Вам доступен класс Person, описывающий человека. При создании экземпляра класс принимает
# два аргумента в следующем порядке:

# name — имя человека
# surname — фамилия человека

# Экземпляр класса Person имеет два атрибута:

# name — имя человека
# surname — фамилия человека

# Класс Person имеет одно свойство:

# fullname — свойство, доступное для чтения и записи, возвращающее полное имя человека в
# виде строки:
# <имя> <фамилия>

# Реализуйте свойство fullname класса Person с помощью декоратора @property.

# Примечание 1. При изменении имени и/или фамилии человека должно изменяться и его полное
# имя. Аналогично при изменении полного имени должны изменяться имя и фамилия.

class Person:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname

    @property
    def fullname(self):
        return f'{self.name} {self.surname}'

    @fullname.setter
    def fullname(self, fullname):
        self.name, self.surname = fullname.split()



# Класс Account
# В целях безопасности в базах данных пароли от аккаунтов пользователей хранятся не в явном
# виде, а в виде хеш-значений — чисел, вычисленных по специальному алгоритму на основе паролей.

# Вам доступна функция hash_function(), которая принимает в качестве аргумента пароль и
# возвращает его хеш-значение.

# Реализуйте класс Account, описывающий аккаунт интернет-пользователя на некотором сервисе.

# При создании экземпляра класс должен принимать два аргумента в следующем порядке:

# login — логин пользователя
# password — пароль пользователя

# Класс Account должен иметь два свойства:

# login — свойство, доступное только для чтения, возвращающее логин пользователя. При попытке
# изменения свойство должно быть возбуждено исключение AttributeError с текстом:
# Изменение логина невозможно

# password — свойство, доступное для чтения и записи, возвращающее хеш-значение пароля от
# аккаунта пользователя. При изменении свойство должно вычислять хеш-значение нового пароля
# и сохранять его, а не сам пароль

def hash_function(password):
    hash_value = 0
    for char, index in zip(password, range(len(password))):
        hash_value += ord(char) * index
    return hash_value % 10**9


class Account:
    def __init__(self, login, password):
        self._login = login
        self.password = password

    @property
    def login(self):
        return self._login
    
    @login.setter
    def login(self, new_login):
        raise AttributeError('Изменение логина невозможно')
        
    @property
    def password(self):
        return self._password
    
    @password.setter
    def password(self, new_password):
        self._password = hash_function(new_password)



# Класс QuadraticPolynomial
# Квадратный трехчлен – это многочлен вида ax^2 + bx + c, где a != 0. Например:

# x^2 + 1
# x^2 - 5x + 6

# Значение переменной x, при котором квадратный трехчлен обращается в ноль, называют его корнем.
# Квадратный трехчлен может иметь один корень, два корня или вовсе не иметь корней.

# Реализуйте класс QuadraticPolynomial, описывающий квадратный трехчлен. При создании экземпляра
# класс должен принимать три аргумента в следующем порядке:

# a — коэффициент a квадратного трехчлена
# b — коэффициент b квадратного трехчлена
# c — коэффициент c квадратного трехчлена

# Экземпляр класса QuadraticPolynomial должен иметь три атрибута:

# a — коэффициент a квадратного трехчлена
# b — коэффициент b квадратного трехчлена
# c — коэффициент c квадратного трехчлена

# Класс QuadraticPolynomial должен иметь четыре свойства:

# x1 — свойство, доступное только для чтения, возвращающее корень квадратного трехчлена
# Если квадратный трехчлен не имеет корней (b^2 - 4ac < 0), значением свойства должно
# быть значение None

# x2 — свойство, доступное только для чтения, возвращающее корень квадратного трехчлена
 
# Если квадратный трехчлен не имеет корней (b^2 - 4ac < 0), значением свойства должно
# быть значение None

# view — свойство, доступное только для чтения, возвращающее строку вида:

# ax^2 + bx + c

# где a, b и с представляют коэффициенты квадратного трехчлена

# coefficients — свойство, доступное для чтения и записи, возвращающее кортеж вида:

# (a, b, c)

# где a, b и с представляют коэффициенты квадратного трехчлена

# Примечание 1. Если квадратный трехчлен имеет лишь один корень, значения свойств x1 и x2 должны
# совпадать.

# Примечание 2. При изменении коэффициентов квадратного трехчлена через соответствующие атрибуты
# или свойство coefficients значения свойств x1, x2, view и coefficients также должны изменяться.

# Примечание 3. Если какие-либо коэффициенты квадратного трехчлена равны нулю, они по-прежнему
# должны присутствовать в строке, возвращаемой свойством view, дополнительно их убирать не нужно.

from math import sqrt


class QuadraticPolynomial:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    @property
    def descriminant(self):
        return self.b**2 - 4 * self.a * self.c
    
    @property
    def x1(self):
        return (-self.b - sqrt(self.descriminant)) / (2 * self.a) if self.descriminant >= 0 else None
    
    @property
    def x2(self):
        return (-self.b + sqrt(self.descriminant)) / (2 * self.a) if self.descriminant >= 0 else None
    
    @property
    def view(self):
        t1 = '{}x^2'.format(abs(self.a)) if self.a > 0 else '-{}x^2'.format(abs(self.a))
        t2 = ' + {}x'.format(self.b) if self.b >= 0 else ' - {}x'.format(abs(self.b))
        t3 = ' + {}'.format(self.c) if self.c >= 0 else ' - {}'.format(abs(self.c))
        return f"{t1}{t2}{t3}"
    
    @property
    def coefficients(self):
        return (self.a, self.b, self.c)
    
    @coefficients.setter
    def coefficients(self, coefs):
        self.a, self.b, self.c = coefs



# Класс Color
# Для кодирования цвета часто используется шестнадцатеричное значение цвета. Оно записывается в
# формате #RRGGBB, где RR (красный), GG (зеленый) и BB (синий) являются шестнадцатеричными целыми
# числами в диапазоне [00; FF] (или [0; 255] в десятичной системе счисления), которые указывают
# интенсивность соответствующих цветов. Например, #0000FF представляет чистый синий цвет, так как
# синий компонент имеет наивысшее значение (FF), а остальные — 00.

# Реализуйте класс Color, описывающий цвет. При создании экземпляра класс должен принимать один
# аргумент:

# hexcode — шестнадцатеричное значение цвета 

# Экземпляр класса Color должен иметь три атрибута:

# r — интенсивность красного компонента цвета в виде десятичного числа
# g — интенсивность зеленого компонента цвета в виде десятичного числа
# b — интенсивность синего компонента цвета в виде десятичного числа

# Класс Color должен иметь одно свойство:

# hexcode — свойство, доступное для чтения и записи, возвращающее шестнадцатеричное значение цвета

# Примечание 1. При изменении шестнадцатеричного значения цвета значения атрибутов r, g и b также
# должны изменяться.

# Примечание 2. Гарантируется, что для записи шестнадцатеричных чисел используются только заглавные
# латинские буквы.

class Color:
    def __init__(self, hexcode):
        self.hexcode = hexcode

    @property
    def hexcode(self):
        return self._hexcode
    
    @hexcode.setter
    def hexcode(self, string):
        self._hexcode = string.upper()
        self.r = int(string[:2], 16)
        self.g = int(string[2:4], 16)
        self.b = int(string[-2:], 16)
