# Функция hash_function()
# Реализуйте функцию hash_function(), которая принимает один аргумент:

# obj — произвольный объект

# Функция должна вычислять хеш-значение объекта obj согласно следующему алгоритму:

# 1. вычисление значения выражения:

# ord(obj[0]) * ord(obj[-1]) + ord(obj[1]) * ord(obj[-2]) + ord(obj[2]) * ord(obj[-3]) + ...

# где obj — объект, преобразованный в строку с помощью функции str(). Обратите внимание, что суммироваться
# должны произведение первого и последнего элементов, второго и предпоследнего, и так далее до середины.
# Если obj имеет нечетное количество символов, то серединный элемент должен прибавляться без перемножения

# 2. вычисление значения выражения:

# ord(obj[0]) * 1 - ord(obj[1]) * 2 + ord(obj[2]) * 3 - ord(obj[3]) * 4 + ...

# где obj — объект, преобразованный в строку с помощью функции str()

# 3. вычисление значения выражения:

# (temp1 * temp2) % 123456791

# где temp1 — значение, полученное в первом шаге, temp2 — значение, полученное во втором шаге
# и возвращать значение, полученное в третьем шаге.

# Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию hash_function(),
# но не код, вызывающий ее.


def get_temp1(obj):
    obj = str(obj)
    half_len_obj = len(obj) // 2
    if len(obj) % 2 == 0:
        return sum(ord(obj[i]) * ord(obj[-(i+1)]) for i in range(half_len_obj))
    return sum(ord(obj[i]) * ord(obj[-(i+1)]) for i in range(half_len_obj)) + ord(obj[half_len_obj])


def get_temp2(obj):
    return sum(-(ord(char) * (index+1)) if index % 2 != 0 else ord(char) * (index+1) for index, char in enumerate(str(obj)))


def hash_function(obj):
    return (get_temp1(obj) * get_temp2(obj)) % 123456791
