# Функция print_file_content()
# Реализуйте функцию print_file_content(), которая принимает один аргумент:

# filename — имя текстового файла

# Функция должна выводить содержимое файла с именем filename. Если файла с данным именем нет в
# папке с программой, функция должна вывести текст:

# Файл не найден

# Примечание 1. Имя файла, передаваемого в функцию, уже содержит расширение.

# Примечание 2. При открытии файла используйте явное указание кодировки UTF-8.

# Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию
# print_file_content(), но не код, вызывающий ее.

def print_file_content(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            print(file.read())
    except Exception as error:
        print('Файл не найден')



# Функция non_closed_files()
# Реализуйте функцию non_closed_files(), которая принимает один аргумент:

# files — список файловых объектов

# Функция должна возвращать список, элементами которого являются открытые файловые объекты из списка
# files.

# Примечание 1. Файловые объекты в возвращаемом функцией списке должны располагаться в своем исходном
# порядке.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию
# non_closed_files(), но не код, вызывающий ее.

def non_closed_files(files):
    return [file for file in files if not file.closed]



# Функция log_for()
# Лог-файл — это текстовый файл, в который автоматически записывается важная информация о работе
# системы или программы. Форматов лог-файла довольно много, однако в рамках этой задачи будем считать,
# что все лог-файлы имеют следующий единый формат:

# 2022-01-01 INFO: User logged in
# 2022-01-01 ERROR: Invalid input data
# 2022-01-01 WARNING: File not found
# 2022-01-02 INFO: User logged out
# 2022-01-03 INFO: User registered

# То есть каждая строка лог-файла описывает некоторое событие, которое характеризуется датой в формате
# YYYY-MM-DD, типом и кратким описанием.

# Реализуйте функцию log_for(), которая принимает два аргумента в следующем порядке:

# logfile — имя лог-файла
# date_str — строковая дата в формате YYYY-MM-DD

# Функция должна создавать текстовый файл с именем:

# log_for_<date_str>.txt

# и записывать в него все события из файла logfile, которые произошли в дату date_str. События должны
# записываться без указания даты, а также располагаться в своем исходном порядке.

# Примечание 1. Имя файла, передаваемого в функцию, уже содержит расширение.

# Примечание 2. При открытии файла используйте явное указание кодировки UTF-8.

# Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию log_for(),
# но не код, вызывающий ее.

def log_for(logfile, date_str):
    with (
        open(f"log_for_{date_str}.txt", 'w', encoding='utf-8') as new_logs,
        open(logfile, 'r', encoding='utf-8') as logs
    ):
        for log in logs:
            if log[:10] == date_str:
                new_logs.write(log[11:])
